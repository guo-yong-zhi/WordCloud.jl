var documenterSearchIndex = {"docs":
[{"location":"#WordCloud.jl-Documentation","page":"Index","title":"WordCloud.jl Documentation","text":"","category":"section"},{"location":"","page":"Index","title":"Index","text":"","category":"page"},{"location":"","page":"Index","title":"Index","text":"CurrentModule = WordCloud\nDocTestSetup = quote\n    using WordCloud\nend","category":"page"},{"location":"#Adding-WordCloud.jl","page":"Index","title":"Adding WordCloud.jl","text":"","category":"section"},{"location":"","page":"Index","title":"Index","text":"using Pkg\nPkg.add(\"WordCloud\")","category":"page"},{"location":"#Documentation","page":"Index","title":"Documentation","text":"","category":"section"},{"location":"","page":"Index","title":"Index","text":"Modules = [WordCloud, WordCloud.TextProcessing, WordCloud.Render]","category":"page"},{"location":"#WordCloud.WordCloud","page":"Index","title":"WordCloud.WordCloud","text":"The WordCloud.jl package is a flexible, faithful and efficient word cloud generator in Julia.\n\nusing WordCloud\nwc = wordcloud(\"It's easy to generate a beautiful word cloud.\") |> generate!\npaint(wc, \"wordcloud.svg\")\n\nPlease visit the repository at: https://github.com/guo-yong-zhi/WordCloud.jl\n\n\n\n\n\n","category":"module"},{"location":"#WordCloud.fit!-Tuple{Any, Vararg{Any}}","page":"Index","title":"WordCloud.fit!","text":"Positional Arguments\n\nwc: the word cloud object to be fitted\nepochs: the number of training epochs\n\nKeyword Arguments\n\npatience: the number of epochs before repositioning\nreposition: a boolean value that determines whether repositioning is enabled or disabled. Additionally, it can accept a float value p (0 ≤ p ≤ 1) to indicate the repositioning ratio, an integer value n to specify the minimum index for repositioning, a function index::Int -> repositionable::Bool to customize the repositioning behavior, or a whitelist for specific indexes.\ntrainer: specify a training engine\n\n\n\n\n\n","category":"method"},{"location":"#WordCloud.generate!-Tuple{WordCloud.WC, Vararg{Any}}","page":"Index","title":"WordCloud.generate!","text":"Positional Arguments\n\nwc: the word cloud object to be fitted\nepochs: the number of training epochs\n\nKeyword Arguments\n\nretry: the number of attempts for shrinking and retraining, defaults to 3; set to 1 to disable shrinking\npatience: the number of epochs before repositioning\nreposition: a boolean value that determines whether repositioning is enabled or disabled. Additionally, it can accept a float value p (0 ≤ p ≤ 1) to indicate the repositioning ratio, an integer value n to specify the minimum index for repositioning, a function index::Int -> repositionable::Bool to customize the repositioning behavior, or a whitelist for specific indexes.\ntrainer: specify a training engine\n\n\n\n\n\n","category":"method"},{"location":"#WordCloud.getangles","page":"Index","title":"WordCloud.getangles","text":"This function accepts two positional arguments: a wordcloud object and an index. The index can be a string, number, list, or any other supported type of index. The index argument is optional, and omitting it will retrieve all the values.\n\n\n\n\n\n","category":"function"},{"location":"#WordCloud.getcolors","page":"Index","title":"WordCloud.getcolors","text":"This function accepts two positional arguments: a wordcloud object and an index. The index can be a string, number, list, or any other supported type of index. The index argument is optional, and omitting it will retrieve all the values.\n\n\n\n\n\n","category":"function"},{"location":"#WordCloud.getfonts","page":"Index","title":"WordCloud.getfonts","text":"This function accepts two positional arguments: a wordcloud object and an index. The index can be a string, number, list, or any other supported type of index. The index argument is optional, and omitting it will retrieve all the values.\n\n\n\n\n\n","category":"function"},{"location":"#WordCloud.getfontsizes","page":"Index","title":"WordCloud.getfontsizes","text":"This function accepts two positional arguments: a wordcloud object and an index. The index can be a string, number, list, or any other supported type of index. The index argument is optional, and omitting it will retrieve all the values.\n\n\n\n\n\n","category":"function"},{"location":"#WordCloud.getimages","page":"Index","title":"WordCloud.getimages","text":"This function accepts two positional arguments: a wordcloud object and an index. The index can be a string, number, list, or any other supported type of index. The index argument is optional, and omitting it will retrieve all the values.\n\n\n\n\n\n","category":"function"},{"location":"#WordCloud.getpositions","page":"Index","title":"WordCloud.getpositions","text":"This function accepts two positional arguments: a wordcloud object and an index. The index can be a string, number, list, or any other supported type of index. The index argument is optional, and omitting it will retrieve all the values. The keyword argument type can be either getshift or getcenter.\n\n\n\n\n\n","category":"function"},{"location":"#WordCloud.getsvgimages","page":"Index","title":"WordCloud.getsvgimages","text":"This function accepts two positional arguments: a wordcloud object and an index. The index can be a string, number, list, or any other supported type of index. The index argument is optional, and omitting it will retrieve all the values.\n\n\n\n\n\n","category":"function"},{"location":"#WordCloud.getweights","page":"Index","title":"WordCloud.getweights","text":"This function accepts two positional arguments: a wordcloud object and an index. The index can be a string, number, list, or any other supported type of index. The index argument is optional, and omitting it will retrieve all the values.\n\n\n\n\n\n","category":"function"},{"location":"#WordCloud.getwords","page":"Index","title":"WordCloud.getwords","text":"This function accepts two positional arguments: a wordcloud object and an index. The index can be a string, number, list, or any other supported type of index. The index argument is optional, and omitting it will retrieve all the values.\n\n\n\n\n\n","category":"function"},{"location":"#WordCloud.ignore-Tuple{Any, WordCloud.WC, AbstractArray{Bool}}","page":"Index","title":"WordCloud.ignore","text":"Exclude specific words as if they do not exist, and then execute the function. It functions as the opposite of keep.\n\nignore(fun, wc, ws::String) # ignore a word\nignore(fun, wc, ws::Set{String}) # ignore all words in ws\nignore(fun, wc, ws::Vector{String}) # ignore all words in ws\nignore(fun, wc, inds::Union{Integer, Vector{Integer}})\nignore(fun, wc::WC, mask::AbstractArray{Bool}) # ignore words. The mask must have the same length as wc\n\n\n\n\n\n","category":"method"},{"location":"#WordCloud.initwords!-Tuple{Any, Integer}","page":"Index","title":"WordCloud.initwords!","text":"Initialize the images and other resources associated with words using the specified style.\n\n\n\n\n\n","category":"method"},{"location":"#WordCloud.keep-Tuple{Any, WordCloud.WC, AbstractArray{Bool}}","page":"Index","title":"WordCloud.keep","text":"Retain specific words and ignore the rest, and then execute the function. It functions as the opposite of ignore.\n\nkeep(fun, wc, ws::String) # keep a word\nkeep(fun, wc, ws::Set{String}) # keep all words in ws\nkeep(fun, wc, ws::Vector{String}) # keep all words in ws\nkeep(fun, wc, inds::Union{Integer, Vector{Integer}})\nkeep(fun, wc::WC, mask::AbstractArray{Bool}) # keep words. The mask must have the same length as wc\n\n\n\n\n\n","category":"method"},{"location":"#WordCloud.loadmask-Tuple{AbstractMatrix{<:ColorTypes.TransparentColor{C, T, 4} where {C<:ColorTypes.AbstractRGB, T}}, Vararg{Any}}","page":"Index","title":"WordCloud.loadmask","text":"Load an image as a mask, recolor it, or resize it, among other options.\n\nexamples\n\nloadmask(open(\"res/heart.jpg\"), 256, 256) # resize to 256*256  \nloadmask(\"res/heart.jpg\", ratio=0.3) # scaled by 0.3  \nloadmask(\"res/heart.jpg\", color=\"red\", ratio=2) # set forecolor  \nloadmask(\"res/heart.jpg\", transparent=rgba->maximum(rgba[1:3])*(rgba[4]/255)>128) # set transparent using a Function \nloadmask(\"res/heart.jpg\", color=\"red\", transparent=(1,1,1)) # set forecolor and transparent  \nloadmask(\"res/heart.svg\") # only a subset of arguments is supported\n\npadding: an Integer or a tuple of two Integers.   For other keyword arguments like outline, linecolor, and smoothness, refer to the function outline.\n\n\n\n\n\n","category":"method"},{"location":"#WordCloud.paint-Tuple{WordCloud.WC, Vararg{Any}}","page":"Index","title":"WordCloud.paint","text":"examples\n\npaint(wc::WC)\npaint(wc::WC, background=false) # without background\npaint(wc::WC, background=outline(wc.mask)) # use a different background\npaint(wc::WC, ratio=0.5) # resize the output\npaint(wc::WC, \"result.png\", ratio=0.5) # save as png file\npaint(wc::WC, \"result.svg\") # save as svg file\n\n\n\n\n\n","category":"method"},{"location":"#WordCloud.paintsvg-Tuple{WordCloud.WC}","page":"Index","title":"WordCloud.paintsvg","text":"Similar to paint, but exports SVG\n\n\n\n\n\n","category":"method"},{"location":"#WordCloud.pin-Tuple{Any, WordCloud.WC, AbstractArray{Bool}}","page":"Index","title":"WordCloud.pin","text":"Fix specific words as if they were part of the background, and then execute the function.\n\npin(fun, wc, ws::String) # pin an single  word\npin(fun, wc, ws::Set{String}) # pin all words in ws\npin(fun, wc, ws::Vector{String}) # pin all words in ws\npin(fun, wc, inds::Union{Integer, Vector{Integer}})\npin(fun, wc::WC, mask::AbstractArray{Bool}) # pin words. # pin words. The mask must have the same length as wc.\n\n\n\n\n\n","category":"method"},{"location":"#WordCloud.placewords!-Tuple{WordCloud.WC}","page":"Index","title":"WordCloud.placewords!","text":"placewords!(wc)\nplacewords!(wc, style=:uniform)\nplacewords!(wc, style=:gathering)\nplacewords!(wc, style=:gathering, level=5) # The level parameter controls the intensity of gathering, typically ranging from 4 to 6. The default value is 5.\nplacewords!(wc, style=:gathering, level=6, rt=0) # rt=0 for rectangle, rt=1 for ellipse, rt=2 for rhombus. The default value is 1.     There is also a keyword argument centralword available. For example, centralword=1, centralword=\"Alice\" or centralword=false.\n\nWhen you have set style=:gathering, you should also disable repositioning in generate!, especially for big words. For example, generate!(wc, reposition=0.7). The keyword argument reorder is a function used to reorder the words, which affects the order of placement. For example, you can use reverse or WordCloud.shuffle.\n\n\n\n\n\n","category":"method"},{"location":"#WordCloud.recolor!-Tuple{Any, Vararg{Any}}","page":"Index","title":"WordCloud.recolor!","text":"Recolor the words in wc using different styles based on the background picture. The styles supported are :average, :main, :clipping, :blending, and :reset (to undo all effects of the other styles). e.g.  \n\nrecolor!(wc, style=:average)\nrecolor!(wc, style=:main)\nrecolor!(wc, style=:clipping, background=blur(getmask(wc))) # The background parameter is optional\nrecolor!(wc, style=:blending, alpha=0.3) # The alpha parameter is optional\nrecolor!(wc, style=:reset)\n\nThe effects of :average, :main, and :clipping are determined solely by the background. However, the effect of :blending is also influenced by the color of the previous word. Therefore, :blending can also be used in combination with other styles.  The results of clipping and blending cannot be exported as SVG files; PNG should be used instead.\n\n\n\n\n\n","category":"method"},{"location":"#WordCloud.rescale!-Tuple{WordCloud.WC, Real}","page":"Index","title":"WordCloud.rescale!","text":"rescale!(wc::WC, ratio::Real) Resize all words proportionally. Use a ratio < 1 to shrink the size, and a ratio > 1 to expand the size.\n\n\n\n\n\n","category":"method"},{"location":"#WordCloud.runexample","page":"Index","title":"WordCloud.runexample","text":"Available values: [:alice, :animation1, :animation2, :benchmark, :compare, :compare2, :custom, :fromweb, :gathering, :highdensity, :juliadoc, :lettermask, :logo, :nomask, :outline, :pattern, :qianziwen, :random, :recolor, :semantic, :series, :中文]\n\n\n\n\n\n","category":"function"},{"location":"#WordCloud.setangles!-Tuple{WordCloud.WC, Any, Union{Number, AbstractVector{<:Number}}}","page":"Index","title":"WordCloud.setangles!","text":"This function accepts three positional arguments: a wordcloud object, an index, and a value. The index can be a string, number, list, or any other supported type of index. The index argument is optional, and omitting it will retrieve all the values.\n\n\n\n\n\n","category":"method"},{"location":"#WordCloud.setcolors!-Tuple{WordCloud.WC, Any, Any}","page":"Index","title":"WordCloud.setcolors!","text":"This function accepts three positional arguments: a wordcloud object, an index, and a value. The index can be a string, number, list, or any other supported type of index. The index argument is optional, and omitting it will retrieve all the values.\n\n\n\n\n\n","category":"method"},{"location":"#WordCloud.setfonts!-Tuple{WordCloud.WC, Any, Union{AbstractString, AbstractVector{<:AbstractString}}}","page":"Index","title":"WordCloud.setfonts!","text":"This function accepts three positional arguments: a wordcloud object, an index, and a value. The index can be a string, number, list, or any other supported type of index. The index argument is optional, and omitting it will retrieve all the values.\n\n\n\n\n\n","category":"method"},{"location":"#WordCloud.setfontsizes!-Tuple{WordCloud.WC, Any, Union{Number, AbstractVector{<:Number}}}","page":"Index","title":"WordCloud.setfontsizes!","text":"This function accepts three positional arguments: a wordcloud object, an index, and a value. The index can be a string, number, list, or any other supported type of index. The index argument is optional, and omitting it will retrieve all the values.\n\n\n\n\n\n","category":"method"},{"location":"#WordCloud.setimages!-Tuple{WordCloud.WC, Any, AbstractMatrix}","page":"Index","title":"WordCloud.setimages!","text":"This function accepts three positional arguments: a wordcloud object, an index, and a value. The index can be a string, number, list, or any other supported type of index. The index argument is optional, and omitting it will retrieve all the values.\n\n\n\n\n\n","category":"method"},{"location":"#WordCloud.setpositions!-Tuple{WordCloud.WC, Any, Any}","page":"Index","title":"WordCloud.setpositions!","text":"This function accepts three positional arguments: a wordcloud object, an index, and a value. The index can be a string, number, list, or any other supported type of index. The index argument is optional, and omitting it will retrieve all the values. The keyword argument type can be either setshift! or setcenter!.\n\n\n\n\n\n","category":"method"},{"location":"#WordCloud.setsvgimages!-Tuple{WordCloud.WC, Any, Any}","page":"Index","title":"WordCloud.setsvgimages!","text":"This function accepts three positional arguments: a wordcloud object, an index, and a value. The index can be a string, number, list, or any other supported type of index. The index argument is optional, and omitting it will retrieve all the values.\n\n\n\n\n\n","category":"method"},{"location":"#WordCloud.setweights!-Tuple{WordCloud.WC, Any, Union{Number, AbstractVector{<:Number}}}","page":"Index","title":"WordCloud.setweights!","text":"This function accepts three positional arguments: a wordcloud object, an index, and a value. The index can be a string, number, list, or any other supported type of index. The index argument is optional, and omitting it will retrieve all the values.\n\n\n\n\n\n","category":"method"},{"location":"#WordCloud.setwords!-Tuple{WordCloud.WC, Any, Union{AbstractString, AbstractVector{<:AbstractString}}}","page":"Index","title":"WordCloud.setwords!","text":"This function accepts three positional arguments: a wordcloud object, an index, and a value. The index can be a string, number, list, or any other supported type of index. The index argument is optional, and omitting it will retrieve all the values.\n\n\n\n\n\n","category":"method"},{"location":"#WordCloud.showexample","page":"Index","title":"WordCloud.showexample","text":"Available values: [:alice, :animation1, :animation2, :benchmark, :compare, :compare2, :custom, :fromweb, :gathering, :highdensity, :juliadoc, :lettermask, :logo, :nomask, :outline, :pattern, :qianziwen, :random, :recolor, :semantic, :series, :中文]\n\n\n\n\n\n","category":"function"},{"location":"#WordCloud.wordcloud-Tuple{Tuple}","page":"Index","title":"WordCloud.wordcloud","text":"Positional Arguments\n\nThe positional arguments are used to specify words and weights in various forms, such as Tuple or Dict.\n\nwords::AbstractVector{<:AbstractString}, weights::AbstractVector{<:Real}\nwords_weights::Tuple\ncounter::AbstractDict\ncounter::AbstractVector{<:Pair}\n\nOptional Keyword Arguments\n\nstyle-related keyword arguments\n\ncolors = \"black\" # same color for all words  \ncolors = (\"black\", (0.5,0.5,0.7), \"yellow\", \"#ff0000\", 0.2) # entries are randomly chosen  \ncolors = [\"black\", (0.5,0.5,0.7), \"yellow\", \"red\", (0.5,0.5,0.7), 0.2, ......] # elements are used in a cyclic manner  \ncolors = :seaborn_dark # Using a preset scheme. See WordCloud.colorschemes for all supported Symbols. WordCloud.displayschemes() may be helpful.\nangles = 0 # same angle for all words  \nangles = (0, 90, 45) # randomly select entries  \nangles = 0:180 # randomly select entries  \nangles = [0, 22, 4, 1, 100, 10, ......] # use elements in a cyclic manner  \nfonts = \"Serif Bold\" # same font for all words  \nfonts = (\"Arial\", \"Times New Roman\", \"Tahoma\") # randomly select entries  \nfonts = [\"Arial\", \"Times New Roman\", \"Tahoma\", ......] # use elements in a cyclic manner  \ndensity = 0.55 # default is 0.5  \nspacing = 1  # minimum spacing between words\n\nmask-related keyword arguments\n\nmask = loadmask(\"res/heart.jpg\", 256, 256) # refer to the documentation of loadmask  \nmask = loadmask(\"res/heart.jpg\", color=\"red\", ratio=2) # refer to the documentation of loadmask\nmask = \"res/heart.jpg\" # shortcut for loadmask(\"res/heart.jpg\")\nmask = shape(ellipse, 800, 600, color=\"white\", backgroundcolor=(0,0,0,0)) # refer to the documentation of shape.\nmask = box # mask can also be one of box, ellipse, squircle, ngon, star, bezingon or bezistar. Refer to the documentation of shape. \nmasksize: It can be a tuple (width, height), a single number indicating the side length, or one of the symbols :original, :default, or :auto. \nbackgroundsize: Refer to shape. It is used with masksize to specify the padding size.\nmaskcolor: It can be \"black\", \"#ff0000\", (0.5,0.5,0.7), 0.2, or :default, :original (to keep it unchanged), or :auto (to auto recolor the mask).\nbackgroundcolor: It can be \"black\", \"#ff0000\", (0.5,0.5,0.7), 0.2, or :default, :original, :maskcolor, or :auto (randomly select between :original and :maskcolor).\n\noutline, linecolor, smoothness: Refer to the shape and outline functions.\n\ntransparent = (1,0,0) # set the transparent color in the mask  \ntransparent = nothing # no transparent color  \ntransparent = c->(c[1]+c[2]+c[3])/3*(c[4]/255)>128) # set transparency using a function. c is an (r,g,b,a) Tuple.\n\n\n\nNotes\nSome arguments depend on whether the mask is provided or on the type of the provided mask.\n\nother keyword arguments\n\nThe keyword argument state is a function. It will be called after the wordcloud object is constructed, which sets the object to a specific state.\n\nstyle, centralword, reorder, rt, level: Configure the style of placewords! Refer to the documentation of placewords!.\nstate = placewords! # It is the default setting that initializes the position of words\nstate = generate! # get the result directly\nstate = initwords! # only initializes resources, such as word pictures\nstate = identity # do nothing\n\n\n\nNotes\nAfter obtaining the wordcloud object, the following steps are required to obtain the resulting picture: initwords! -> placewords! -> generate! -> paint\nYou can skip placewords! and/or initwords!, and these operations will be automatically performed with default parameters\n\n\n\n\n\n","category":"method"},{"location":"#WordCloud.TextProcessing.lemmatize-Tuple{Any}","page":"Index","title":"WordCloud.TextProcessing.lemmatize","text":"only handles the simple cases of plural nouns and third person singular verbs\n\n\n\n\n\n","category":"method"},{"location":"#WordCloud.TextProcessing.processtext-Tuple{AbstractDict{<:AbstractString, <:Real}}","page":"Index","title":"WordCloud.TextProcessing.processtext","text":"Process the text, filter the words, and adjust the weights. Return a vector of words and a vector of weights.\n\nPositional Arguments\n\ntext: string, a vector of words, an opened file (IO), a counter, a Dict{<:String, <:Real}, a Vector{Pair}, a Vector{Tuple}, or two Vectors.\n\nOptional Keyword Arguments\n\nstopwords: a set of words\nminlength, maxlength: minimum and maximum length of a word to be included\nminfrequency: minimum frequency of a word to be included\nmaxnum: maximum number of words, defaults to 500\nminweight, maxweight: within 0 ~ 1, set to adjust extreme weight\nprocess: a function to process word counter, defaults to rescaleweights(identity, :wordarea)∘casemerge!∘lemmatize!\n\n\n\n\n\n","category":"method"},{"location":"#WordCloud.TextProcessing.rescaleweights","page":"Index","title":"WordCloud.TextProcessing.rescaleweights","text":"rescaleweights(func=identity, p=0)   This function takes word length into account. Therefore, the rescaled weights can be used as font size coefficients.   The function func(w::Real)->Real is used to remap the weight, expressed as weight = func(weight); p represents the exponent of the power mean. We set weight = powermean(1*fontsize, wordlength*fontsize) = ((fontsize^p + (wordlength*fontsize)^p)/2) ^ (1/p).   That is, weight = fontsize * powermean(1, wordlength).   Overall, this gives us fontsize = func(weight) / powermean(1, wordlength).   When p is -Inf, the power mean is at its minimum, resulting in fontsize=weight. When p is Inf, the power mean is at its maximum, resulting in fontsize=weight/wordlength.   When p is -1, the power mean is the harmonic mean. When p is 0, the power mean is the geometric mean, preserving the word area.  When p is 1, the power mean is the arithmetic mean. When p is 2, the power mean is the root mean square, preserving the diagonal length.  \n\n\n\n\n\n","category":"function"},{"location":"#WordCloud.Render.crop-Tuple{AbstractMatrix, Vararg{Any, 4}}","page":"Index","title":"WordCloud.Render.crop","text":"a, b, c, d are all inclusive\n\n\n\n\n\n","category":"method"},{"location":"#WordCloud.Render.crop-Tuple{Luxor.Drawing, Vararg{Any, 4}}","page":"Index","title":"WordCloud.Render.crop","text":"a, b, c, d are all inclusive\n\n\n\n\n\n","category":"method"},{"location":"#WordCloud.Render.outline-Tuple{Any}","page":"Index","title":"WordCloud.Render.outline","text":"img: a bitmap image;   linewidth: 0 <= linewidth;   color: line color;   transparent: color of the background;   smoothness: 0 <= smoothness <= 1  \n\n\n\n\n\n","category":"method"},{"location":"#WordCloud.Render.overlappingarea","page":"Index","title":"WordCloud.Render.overlappingarea","text":"Return the overlapping view of img1 and img2 when img2 is positioned with its top left corner at coordinates (x, y) in img1.\n\n\n\n\n\n","category":"function"},{"location":"#WordCloud.Render.overlay!","page":"Index","title":"WordCloud.Render.overlay!","text":"Place img2 onto img1 at coordinates (x, y).\n\n\n\n\n\n","category":"function"},{"location":"#WordCloud.Render.shape-Tuple{Any, Any, Any, Vararg{Any}}","page":"Index","title":"WordCloud.Render.shape","text":"Generate an SVG image of a box, ellipse, squircle, ngon, star, bezingon, or bezistar.\n\nExamples\n\nshape(box, 80, 50) # box with dimensions 80*50\nshape(box, 80, 50, cornerradius=4) # box with corner radius 4\nshape(squircle, 80, 50, rt=0.7) # squircle or superellipse. rt=0 for rectangle, rt=1 for ellipse, rt=2 for rhombus.\nshape(ngon, 120, 100, npoints=12, orientation=π/6) # regular dodecagon (12 corners) oriented by π/6 \nshape(star, 120, 100, npoints=5) # pentagram (5 tips)\nshape(star, 120, 100, npoints=5, starratio=0.7, orientation=π/2) # 0.7 specifies the ratio of the smaller and larger radii; oriented by π/2\nshape(ellipse, 80, 50, color=\"red\") # red ellipse with dimensions 80*50\nshape(box, 80, 50, backgroundcolor=(0,1,0), backgroundsize=(100, 100)) # 8050 box on a 100100 green background\nshape(squircle, 80, 50, outline=3, linecolor=\"red\", backgroundcolor=\"gray\") # add a red outline to the squircle\n\noutline: an integer.    padding: an integer or a tuple of two integers.    backgroundsize: a tuple of two integers.  color, linecolor, backgroundcolor: any value that can be parsed as a color.\n\n\n\n\n\n","category":"method"},{"location":"#Gallery","page":"Index","title":"Gallery","text":"","category":"section"},{"location":"","page":"Index","title":"Index","text":"WordCloud-Gallery","category":"page"},{"location":"#Index","page":"Index","title":"Index","text":"","category":"section"},{"location":"","page":"Index","title":"Index","text":"","category":"page"}]
}
